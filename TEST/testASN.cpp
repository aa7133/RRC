/*
 * Copyright 2020 AT&T Intellectual Property
 * Copyright 2020 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// Created by adi ENZEL on 1/13/20.
//
#define XML2JSON_HPP_INCLUDED
#include <rrc/rrc.h>

#include <cstring>
#include <string.h>
//#include <error.h>
#include <cerrno>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <iostream>


using namespace std;


//Header:  C5 00 C0 B0 7D 58 F8 D1 42 1A EB 00
//Payload: 1A 0F 50 0F 60 01 93 01 F6 13 00 00
//E1 D6 09 00 00 00 00 A4 00 20 12 95
//88 40 04 09 FB 3C A0 25 1C 17 73 85
//04 80 F0 2E 26 25 C5 C5 B8 D9 28 1F
//28 E4 6C A0 9D B3 95 B8 70 44 80 35
//2B 82 06 0C 03 56 70 58 00 60 06 00
//52 04 7B 2E 10 32 85 78 2E 20 30 41
//98 2E 30 10 40 38 2E 30 00 01 00 44
//11 0C 23 E4 94 1C 80 C0 00 C0 1A 9C
//0F FD D8 04 5F 61 37 01 EB BB 05 0C
//C4 2F A8 DA 00 F5 DD 82 97 22 35 6E
//F3 25 95 0E 1D 00 06 02 00 0A 40 02
//02 83 38 81 80 68 09 05 E1 42 42 C0
//        C0 34 0A 02 C9 47 86 08 1A 90 59 4B
//17 33 40 FF FF FF FF FF FF FF FF 41
//12 10 68 03 A0


uint8_t data[197] = {/* header */0xC5, 0x00, 0xC0, 0xB0, 0x7D, 0x58, 0xF8, 0xD1, 0x42, 0x1A, 0xEB, 0x00,
              /* payload */ 0x1A, 0x0F, 0x50, 0x0F, 0x60, 0x01, 0x93, 0x01, 0xF6, 0x13, 0x00, 0x00,
              0xE1, 0xD6, 0x09, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x20, 0x12, 0x95,
              0x88, 0x40, 0x04, 0x09, 0xFB, 0x3C, 0xA0, 0x25, 0x1C, 0x17, 0x73, 0x85,
              0x04, 0x80, 0xF0, 0x2E, 0x26, 0x25, 0xC5, 0xC5, 0xB8, 0xD9, 0x28, 0x1F,
              0x28, 0xE4, 0x6C, 0xA0, 0x9D, 0xB3, 0x95, 0xB8, 0x70, 0x44, 0x80, 0x35,
              0x2B, 0x82, 0x06, 0x0C, 0x03, 0x56, 0x70, 0x58, 0x00, 0x60, 0x06, 0x00,
              0x52, 0x04, 0x7B, 0x2E, 0x10, 0x32, 0x85, 0x78, 0x2E, 0x20, 0x30, 0x41,
              0x98, 0x2E, 0x30, 0x10, 0x40, 0x38, 0x2E, 0x30, 0x00, 0x01, 0x00, 0x44,
              0x11, 0x0C, 0x23, 0xE4, 0x94, 0x1C, 0x80, 0xC0, 0x00, 0xC0, 0x1A, 0x9C,
              0x0F, 0xFD, 0xD8, 0x04, 0x5F, 0x61, 0x37, 0x01, 0xEB, 0xBB, 0x05, 0x0C,
              0xC4, 0x2F, 0xA8, 0xDA, 0x00, 0xF5, 0xDD, 0x82, 0x97, 0x22, 0x35, 0x6E,
              0xF3, 0x25, 0x95, 0x0E, 0x1D, 0x00, 0x06, 0x02, 0x00, 0x0A, 0x40, 0x02,
              0x02, 0x83, 0x38, 0x81, 0x80, 0x68, 0x09, 0x05, 0xE1, 0x42, 0x42, 0xC0,
              0xC0, 0x34, 0x0A, 0x02, 0xC9, 0x47, 0x86, 0x08, 0x1A, 0x90, 0x59, 0x4B,
              0x17, 0x33, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x41,
              0x12, 0x10, 0x68, 0x03, 0xA0
};



uint8_t dataWitoutHeader[185] = {/* payload */ 0x1A, 0x0F, 0x50, 0x0F, 0x60, 0x01, 0x93, 0x01, 0xF6, 0x13, 0x00, 0x00,
                                 0xE1, 0xD6, 0x09, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x20, 0x12, 0x95,
                                 0x88, 0x40, 0x04, 0x09, 0xFB, 0x3C, 0xA0, 0x25, 0x1C, 0x17, 0x73, 0x85,
                                 0x04, 0x80, 0xF0, 0x2E, 0x26, 0x25, 0xC5, 0xC5, 0xB8, 0xD9, 0x28, 0x1F,
                                 0x28, 0xE4, 0x6C, 0xA0, 0x9D, 0xB3, 0x95, 0xB8, 0x70, 0x44, 0x80, 0x35,
                                 0x2B, 0x82, 0x06, 0x0C, 0x03, 0x56, 0x70, 0x58, 0x00, 0x60, 0x06, 0x00,
                                 0x52, 0x04, 0x7B, 0x2E, 0x10, 0x32, 0x85, 0x78, 0x2E, 0x20, 0x30, 0x41,
                                 0x98, 0x2E, 0x30, 0x10, 0x40, 0x38, 0x2E, 0x30, 0x00, 0x01, 0x00, 0x44,
                                 0x11, 0x0C, 0x23, 0xE4, 0x94, 0x1C, 0x80, 0xC0, 0x00, 0xC0, 0x1A, 0x9C,
                                 0x0F, 0xFD, 0xD8, 0x04, 0x5F, 0x61, 0x37, 0x01, 0xEB, 0xBB, 0x05, 0x0C,
                                 0xC4, 0x2F, 0xA8, 0xDA, 0x00, 0xF5, 0xDD, 0x82, 0x97, 0x22, 0x35, 0x6E,
                                 0xF3, 0x25, 0x95, 0x0E, 0x1D, 0x00, 0x06, 0x02, 0x00, 0x0A, 0x40, 0x02,
                                 0x02, 0x83, 0x38, 0x81, 0x80, 0x68, 0x09, 0x05, 0xE1, 0x42, 0x42, 0xC0,
                                 0xC0, 0x34, 0x0A, 0x02, 0xC9, 0x47, 0x86, 0x08, 0x1A, 0x90, 0x59, 0x4B,
                                 0x17, 0x33, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x41,
                                 0x12, 0x10, 0x68, 0x03, 0xA0
};

int main(const int argc, char **argv) {
    auto bufferLength = 185;
    char *json = getDL_DCCH_MESSAGE(ATS_ALIGNED_BASIC_PER, dataWitoutHeader, bufferLength);
    if (json == nullptr) {
        std::cout << "Error parsing buffer " << std::endl;
    } else {
        std::cout << "buffer is : " << std::endl << json << std::endl;
        free(json);
    }
}